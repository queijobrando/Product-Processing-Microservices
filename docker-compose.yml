services:

  order-service:
    build: ./Order-Service
    container_name: order-service
    environment:
      - SPRING_PROFILES_ACTIVE=${ORDER_SPRING_PROFILES_ACTIVE}
      - ORDER_DATASOURCE_USERNAME=${ORDER_DATASOURCE_USERNAME}
      - ORDER_DATASOURCE_PASSWORD=${ORDER_DATASOURCE_PASSWORD}
      - ORDER_RABBITMQ_USER=${ORDER_RABBITMQ_USER}
      - ORDER_RABBITMQ_PASSWORD=${ORDER_RABBITMQ_PASSWORD}
    depends_on:
      orderdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
    networks:
      - product-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  inventory-service:
    build: ./Inventory-Service
    container_name: inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=${INVENTORY_SPRING_PROFILES_ACTIVE}
      - INVENTORY_DATASOURCE_USERNAME=${INVENTORY_DATASOURCE_USERNAME}
      - INVENTORY_DATASOURCE_PASSWORD=${INVENTORY_DATASOURCE_PASSWORD}
      - INVENTORY_RABBITMQ_USER=${INVENTORY_RABBITMQ_USER}
      - INVENTORY_RABBITMQ_PASSWORD=${INVENTORY_RABBITMQ_PASSWORD}
    depends_on:
      inventorydb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - product-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  payment-service:
    build: ./Payment-Service
    container_name: payment-service
    environment:
      - SPRING_PROFILES_ACTIVE=${PAYMENT_SPRING_PROFILES_ACTIVE}
      - PAYMENT_DATASOURCE_USERNAME=${PAYMENT_DATASOURCE_USERNAME}
      - PAYMENT_DATASOURCE_PASSWORD=${PAYMENT_DATASOURCE_PASSWORD}
      - PAYMENT_RABBITMQ_USER=${PAYMENT_RABBITMQ_USER}
      - PAYMENT_RABBITMQ_PASSWORD=${PAYMENT_RABBITMQ_PASSWORD}
    depends_on:
      paymentdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
      order-service:
        condition: service_healthy
    networks:
      - product-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  service-discovery:
    build: ./Service-Discovery
    container_name: service-discovery
    environment:
      - SPRING_PROFILES_ACTIVE=${DISCOVERY_SPRING_PROFILES_ACTIVE}
    ports:
      - "8761:8761"
    networks:
      - product-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  api-gateway:
    build: ./API-Gateway
    container_name: api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=${GATEWAY_SPRING_PROFILES_ACTIVE}
    depends_on:
      order-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      service-discovery:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - product-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure

  orderdb:
    image: postgres:16
    container_name: orderdb
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: ${ORDER_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${ORDER_DATASOURCE_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventorydb:
    image: postgres:16
    container_name: inventorydb
    environment:
      POSTGRES_DB: inventorydb
      POSTGRES_USER: ${INVENTORY_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${INVENTORY_DATASOURCE_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  paymentdb:
    image: postgres:16
    container_name: paymentdb
    environment:
      POSTGRES_DB: paymentdb
      POSTGRES_USER: ${PAYMENT_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${PAYMENT_DATASOURCE_PASSWORD}
    ports:
      - "5434:5432"
    networks:
      - product-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin4order:
    image: dpage/pgadmin4
    container_name: pgadmin4order
    ports:
      - "15432:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    depends_on:
      - orderdb
      - inventorydb
      - paymentdb
    networks:
      - product-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    networks:
      - product-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  product-network:
    driver: bridge